-- loads contents of a file line by line into the given table
function load_DNSBL_file(filename, dnsbl_list)
	if fileExists(filename) then
		for line in io.lines(filename) do
			table.insert(dnsbl_list, line)
		end
		pdnslog("Lua script: " .. filename .. " successfully loaded", pdns.loglevels.Notice)
	else
		pdnslog("Lua script: could not open file " .. filename, pdns.loglevels.Warning)
	end
end
-- loads contents of a file line by line into the given table
function load_IPBL_file(filename,  ipbl_list, cidrbl_list)
	if fileExists(filename) then
		for line in io.lines(filename) do
			if string.find(line, ".*[/].*") then -- Check if it's a CIDR
				cidrbl_list:addMask(line)
			else -- Assume Normal Query Name
				ipbl_list:add(line)
			end
		end
		pdnslog("Lua script: " .. filename .. " successfully loaded", pdns.loglevels.Notice)
	else
		pdnslog("Lua script: could not open file " .. filename, pdns.loglevels.Warning)
	end
end

local function get_list_files_in_dir(search_dir)
	local files = {}
	for dir in io.popen("ls -pa "..search_dir.." | grep -v /|grep -E \"*(.list|.txt)\""):lines() 
	do
		table.insert(files, pdns_scripts_path.."/"..dir)
	end
	return files
end

-- this function is hooked before resolving starts
function preresolve_mf(dq)
	-- check blocklist
	if dnsbl:check(dq.qname) or ipbl:check(dq.remoteaddr) or cidrbl:match(dq.remoteaddr) then
		if dq.qtype == pdns.A or dq.qtype == pdns.ANY then
			dq:addAnswer(pdns.A, "127.0.0.1")
		end
		
		if dq.qtype == pdns.AAAA or dq.qtype == pdns.ANY then
			dq:addAnswer(pdns.AAAA, "::1")
		end
		
		filterlist_metric:inc()
		return true
	end

	-- default, do not rewrite this response
	return false
end

local dnsbl_file_table = get_list_files_in_dir(pdns_scripts_path.."/dnsbl.d")
local ipbl_file_table = get_list_files_in_dir(pdns_scripts_path.."/ipbl.d")
dnsbl = newDS()
ipbl = newCAS()
cidrbl = newNMG()
for key, filename in pairs(dnsbl_file_table) do
	load_DNSBL_file(filename)
end
for key, filename in pairs(ipbl_file_table) do
	load_IPBL_file(filename)
end

-- get metrics
filterlist_metric = getMetric("filterlist_hits")