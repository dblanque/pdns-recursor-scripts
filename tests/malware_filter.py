import dns.resolver
from enum import Enum
import sys

class bcolors(Enum):
	def __str__(self):
		return str(self.value)

	# Colors
	RED = "\033[1;31m"
	GREEN = "\033[1;32m"
	YELLOW = "\033[1;33m"
	BLUE = "\033[1;34m"
	MAGENTA = "\033[1;35m"
	CYAN = "\033[1;36m"
	L_RED = "\033[91m"
	L_GREEN = "\033[92m"
	L_YELLOW = "\033[93m"
	L_BLUE = "\033[94m"
	L_MAGENTA = "\033[95m"
	L_CYAN = "\033[96m"

	# Formatting
	NC = "\033[0m"  # No Color
	BOLD = "\033[1m"
	UNDERLINE = "\033[4m"
	BLINK = "\033[5m"

def print_c(color: bcolors, message: str, **kwargs):
	"""
	Concatenates and prints {color}{message}{nc}
	"""
	force_print = kwargs.pop("force_print", False)
	if "pytest" not in sys.modules and not force_print:
		return print(f"{color}{message}{bcolors.NC}", **kwargs)

def colorize(color: bcolors, message: str):
	return f"{color}{message}{bcolors.NC}"

def dns_lookup(
	domain,
	record_type: str | None = None,
	dns_server: str | None = None,
	verbose: bool = False,
	raise_exc: bool = False,
	as_rdata: bool = False
):
	results = []
	if not dns_server:
		raise ValueError("dns_server is a required value")
	if not record_type:
		raise ValueError("record_type is a required value")
	resolver = dns.resolver.Resolver()
	resolver.nameservers = [dns_server]  # Set the DNS server

	try:
		answers = resolver.resolve(domain, record_type)
		for rdata in answers:
			rdata_text = rdata.to_text()
			if verbose:
				print(f"{record_type} record for {domain}: {rdata_text}")
			if as_rdata:
				results.append(rdata)
			else:
				results.append(rdata_text)
	except dns.resolver.NXDOMAIN:
		if verbose:
			print(f"NXDOMAIN for {domain}")
		if raise_exc:
			raise
	except dns.resolver.NoAnswer:
		if verbose:
			print(f"No {record_type} records found for {domain}")
		if raise_exc:
			raise
	except dns.resolver.Timeout:
		if verbose:
			print("DNS query timed out")
		if raise_exc:
			raise
	except Exception as e:
		if verbose:
			print(f"DNS query failed: {e}")
		if raise_exc:
			raise
	return results

def assert_ip(qnames: list[str], ip: str):
	if ip not in qnames:
		return False
	return True

def main():
	DNS_IP = "10.10.10.101"
	for q_case in (
		# Domain, Type, Should resolve
		("google.com",					"A", True),
		("ns1.google.com",				"A", True), # 216.239.32.10
		("ns2.google.com",				"A", False), # 216.239.34.10
		("github.com",					"A", True),
		("gitlab.com",					"A", True),
		("example.com",					"A", False),
		("whitelisted.example.com",		"A", True),
		("example.org",					"A", True),
		("sub.example.org",				"A", False),
		("yahoo.com",					"A", False),
		("sub.yahoo.com",				"A", False),
		("bing.com",					"A", False),
		("sub.bing.com",				"A", False),
		("microsoft.com",				"A", False),
		("sub.microsoft.com",			"A", False),
		("mozilla.org",					"A", False),
		("youtube.com",					"A", False),
		("yandex.ru",					"A", False),
		("regex101.com",				"A", False),

		# Blocked but whitelisted
		("google-analytics.com",		"A", True),
		("srienlinea.sri.gob.ec",		"A", True),
		("pichincha.com",				"A", True),
	):
		domain, q_type, expects_resolve = q_case
		lookup = dns_lookup(domain, q_type, DNS_IP)
		if not isinstance(lookup, list):
			raise ValueError("Lookup returned a non-list value.")
		sinkholed = assert_ip(lookup, "0.0.0.0")
		if sinkholed is expects_resolve:
			print(
				"Test %s for %s (%s) - %s" % (
					colorize(bcolors.L_RED, "FAILED"),
					domain,
					str(lookup),
					colorize(bcolors.L_RED, "Should resolve")
					if expects_resolve else
					colorize(bcolors.L_RED, "Should be sinkholed")
				)
			)
		else:
			print(
				"Test %s for %s (%s) <- %s" % (
					colorize(bcolors.L_GREEN, "PASSED"),
					domain,
					str(lookup),
					colorize(bcolors.L_BLUE, "Should resolve")
					if expects_resolve else
					colorize(bcolors.L_BLUE, "Should be sinkholed")
				)
			)

	for q_case in (
		("localhost", "A"),
		("localhost.localdomain", "A"),
		("local", "A"),
		("broadcasthost", "A"),
		("ip6-localhost", "AAAA"),
		("ip6-loopback", "AAAA"),
		("ip6-localnet", "AAAA"),
		("localhost", "AAAA"),
		("ip6-mcastprefix", "AAAA"),
		("ip6-allnodes", "AAAA"),
		("ip6-allrouters", "AAAA"),
		("ip6-allhosts", "AAAA"),
	):
		domain, q_type = q_case
		raised_nx = False
		try:
			lookup = dns_lookup(
				domain=domain,
				record_type=q_type,
				dns_server=DNS_IP,
				raise_exc=True,
				as_rdata=True
			)
		except dns.resolver.NXDOMAIN:
			lookup = "NXDOMAIN"
			raised_nx = True

		if not raised_nx:
			print(
				"Test %s for %s (%s)" % (
					colorize(bcolors.L_RED, "FAILED"),
					domain,
					str(lookup)
				)
			)
		else:
			print(
				"Test %s for %s (%s)" % (
					colorize(bcolors.L_GREEN, "PASSED"),
					domain,
					str(lookup)
				)
			)

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("Exiting script.")
